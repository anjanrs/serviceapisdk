<?php
/**
 * CollectionData
 *
 * PHP version 5
 *
 * @category Class
 * @package  I2I\ServiceApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * i2i Service API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace I2I\ServiceApi\Model;

use \ArrayAccess;
use \I2I\ServiceApi\ObjectSerializer;

/**
 * CollectionData Class Doc Comment
 *
 * @category Class
 * @package  I2I\ServiceApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CollectionData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Collection_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uid' => 'int',
'name' => 'string',
'desc' => 'string',
'owner' => 'int',
'group' => 'int',
'priv' => 'int',
'gowner' => 'int',
'nowner' => 'int',
'list_style' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uid' => null,
'name' => null,
'desc' => null,
'owner' => null,
'group' => null,
'priv' => null,
'gowner' => null,
'nowner' => null,
'list_style' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uid' => 'uid',
'name' => 'name',
'desc' => 'desc',
'owner' => 'owner',
'group' => 'group',
'priv' => 'priv',
'gowner' => 'gowner',
'nowner' => 'nowner',
'list_style' => 'list_style'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uid' => 'setUid',
'name' => 'setName',
'desc' => 'setDesc',
'owner' => 'setOwner',
'group' => 'setGroup',
'priv' => 'setPriv',
'gowner' => 'setGowner',
'nowner' => 'setNowner',
'list_style' => 'setListStyle'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uid' => 'getUid',
'name' => 'getName',
'desc' => 'getDesc',
'owner' => 'getOwner',
'group' => 'getGroup',
'priv' => 'getPriv',
'gowner' => 'getGowner',
'nowner' => 'getNowner',
'list_style' => 'getListStyle'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['desc'] = isset($data['desc']) ? $data['desc'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['priv'] = isset($data['priv']) ? $data['priv'] : null;
        $this->container['gowner'] = isset($data['gowner']) ? $data['gowner'] : null;
        $this->container['nowner'] = isset($data['nowner']) ? $data['nowner'] : null;
        $this->container['list_style'] = isset($data['list_style']) ? $data['list_style'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uid
     *
     * @return int
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param int $uid Collection Id
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Collection Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets desc
     *
     * @return string
     */
    public function getDesc()
    {
        return $this->container['desc'];
    }

    /**
     * Sets desc
     *
     * @param string $desc Description
     *
     * @return $this
     */
    public function setDesc($desc)
    {
        $this->container['desc'] = $desc;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return int
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param int $owner Owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets group
     *
     * @return int
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param int $group Group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets priv
     *
     * @return int
     */
    public function getPriv()
    {
        return $this->container['priv'];
    }

    /**
     * Sets priv
     *
     * @param int $priv priv
     *
     * @return $this
     */
    public function setPriv($priv)
    {
        $this->container['priv'] = $priv;

        return $this;
    }

    /**
     * Gets gowner
     *
     * @return int
     */
    public function getGowner()
    {
        return $this->container['gowner'];
    }

    /**
     * Sets gowner
     *
     * @param int $gowner Group Owner
     *
     * @return $this
     */
    public function setGowner($gowner)
    {
        $this->container['gowner'] = $gowner;

        return $this;
    }

    /**
     * Gets nowner
     *
     * @return int
     */
    public function getNowner()
    {
        return $this->container['nowner'];
    }

    /**
     * Sets nowner
     *
     * @param int $nowner Nowner
     *
     * @return $this
     */
    public function setNowner($nowner)
    {
        $this->container['nowner'] = $nowner;

        return $this;
    }

    /**
     * Gets list_style
     *
     * @return string
     */
    public function getListStyle()
    {
        return $this->container['list_style'];
    }

    /**
     * Sets list_style
     *
     * @param string $list_style List Style
     *
     * @return $this
     */
    public function setListStyle($list_style)
    {
        $this->container['list_style'] = $list_style;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
